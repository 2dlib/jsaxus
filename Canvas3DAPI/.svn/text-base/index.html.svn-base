<html>
    <head>
		<title>Cavas3D test</title>
	
        <script language="javascript" src="MathHelper.js"></script>
        <script language="javascript" src="Vector.js"></script>
        <script language="javascript" src="Matrix.js"></script>
        <script language="javascript" src="Quaternion.js"></script>
        <!--script language="javascript" src="sylvester.js"></script-->
        
        <script language="javascript" src="FreeCamera.js"></script>
        <script language="javascript" src="ChaseCamera.js"></script>
        <script language="javascript" src="PanCamera.js"></script>
        <script language="javascript" src="FixedCamera.js"></script>
        
        <script language="javascript" src="Model.js"></script>
        <script language="javascript" src="Primitive.js"></script>
        <script language="javascript" src="Cube.js"></script>
        
        <script language="javascript" src="Scene.js"></script>
        <script language="javascript" src="Main.js"></script>
		<!--
		    <script id="shader-fs" type="x-shader/x-fragment">
		varying float intensity;
		varying vec4 FragColor;

		void main(void) {
		    //gl_FragColor = vec4(0.0, 0.0, 1.0, 1.0);
		    gl_FragColor = FragColor;
		}
		    </script>

		    <script id="shader-vs" type="x-shader/x-vertex">
		attribute vec3 Vertex;
		attribute vec3 Normal;
		attribute vec4 InColor;

		uniform mat4 PMatrix;
		uniform mat4 MVMatrix;
		uniform mat3 NMatrix;

		uniform vec4 LightPos;

		varying vec4 FragColor;

		void main(void) {
		    vec4 v = vec4(Vertex, 1.0);
		    vec4 vmv = MVMatrix * v;
		    gl_Position = PMatrix * vmv;

		    vec3 nn = normalize(NMatrix * Normal);
		    vec3 lightDir = vec3(normalize(vmv - LightPos));

		    float intensity = dot(lightDir, nn);

		    vec4 color;

		    if (intensity > 0.95)
		      color = vec4(1.0,0.5,0.5,1.0);
		    else if (intensity > 0.5)
		      color = vec4(0.6,0.3,0.3,1.0);
		    else if (intensity > 0.25)
		      color = vec4(0.4,0.2,0.2,1.0);
		    else
		      color = vec4(0.2,0.1,0.1,1.0);

		    FragColor = color;
		}
		    </script>
		-->
		
		    <script id="shader-fs" type="x-shader/x-fragment">
		varying float intensity;
		varying vec4 FragColor;

		void main(void) {
		    //gl_FragColor = vec4(0.0, 0.0, 1.0, 1.0);
		    gl_FragColor = FragColor;
		}
		    </script>

		    <script id="shader-vs" type="x-shader/x-vertex">
		attribute vec3 Vertex;
		attribute vec3 Normal;
		attribute vec4 InColor;

		uniform mat4 PMatrix;
		uniform mat4 MVMatrix;
		uniform mat3 NMatrix;

		uniform vec4 LightPos;

		varying vec4 FragColor;

		void main(void) {
		    vec4 v = vec4(Vertex, 1.0);
		    vec4 vmv = MVMatrix * v;
		    gl_Position = PMatrix * vmv;

		    vec3 nn = normalize(NMatrix * Normal);
		    vec3 lightDir = vec3(normalize(vmv - LightPos));

		    float NdotL = max(dot(lightDir, Normal), 0.0);

		    const vec3 diffuseColor = vec3(0.4, 0.4, 0.2);
		    const vec3 lightColor = vec3(0.1, 0.1, 0.6);
		    const vec3 ambientColor = vec3(0.1, 0.1, 0.1);

		    vec3 diffuse = diffuseColor + lightColor;

		    FragColor = vec4(NdotL * diffuse + ambientColor, 1.0);
		}
		    </script>

    </head>
    
    <body onload="canvasMain('canvas');">
		<canvas id="canvas" style="border: 2px solid blue" width="500" height="500">
		</canvas>
    </body>
</html>